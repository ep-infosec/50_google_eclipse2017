#
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import datetime
import os
from random import randrange
import stat
from StringIO import StringIO
import threading
import time

from gcloud.exceptions import GCloudError
from mock import call, Mock
import unittest2
from werkzeug.exceptions import ClientDisconnected

from upload_server_test_base import UploadServerTestBase

from common import config, constants, util
from common.eclipse2017_exceptions import FailedToSaveToDatastoreError
from common.eclipse2017_exceptions import FailedToRenameFileError

from app.backend.upload_server import UploadServer

from common_tests.stub import Stub


class UploadServerTests(UploadServerTestBase):
    """
    Unit tests for UploadServer class.
    """
    def setUp(self):
        """
        Setup before each test.
        """
        # Create 64 bytes of random data
        self.data = ''.join([chr(randrange(ord('a'), ord('z')))
                             for _ in range(64)])
        self.filename = 'somefile.dat'

        # UploadServer params/dependencies
        self.file_not_ready_suffix = '.notready'
        self.datastore_kind = 'Object'
        self.retrys = 4
        self.datastore = Mock()
        self.datetime = Mock()
        self.os = Mock()
        self.request = Mock()
        self.Response = Stub('flask.Response')
        self.threading = threading
        self.util = util

        self._create_upload_server()

    def tearDown(self):
        """
        Tear down after each test.
        """
        # Delete any lingering files
        for fname in os.listdir(self.upload_dir):
            os.remove(os.path.join(self.upload_dir, fname))

    def test_init(self):
        static_folder = '/arbitrary'
        template_folder = '/another/arbitrary/path'

        threading_mock = Mock()
        time_mock = Mock()

        upload_server = UploadServer(
            project_id=config.PROJECT_ID,
            file_not_ready_suffix=self.file_not_ready_suffix,
            directory=self.upload_dir,
            datastore_kind=self.datastore_kind,
            retrys=self.retrys,
            readiness_file=self.readiness_file,
            datastore=self.datastore,
            datetime=self.datetime,
            os=self.os,
            threading=threading_mock,
            time=time_mock,
            static_folder=static_folder,
            template_folder=template_folder)

        self.assertEqual(upload_server.config['PROJECT_ID'], config.PROJECT_ID)
        self.assertEqual(upload_server._file_not_ready_suffix,
                         self.file_not_ready_suffix)
        self.assertEqual(upload_server._dir, self.upload_dir)
        self.assertEqual(upload_server._datastore_kind, self.datastore_kind)
        self.assertEqual(upload_server._retrys, self.retrys)
        self.assertEqual(upload_server._readiness_file, self.readiness_file)
        self.assertEqual(upload_server.datastore, self.datastore)
        self.assertEqual(upload_server.datetime, self.datetime)
        self.assertEqual(upload_server.os, self.os)
        self.assertEqual(upload_server.threading, threading_mock)
        self.assertEqual(upload_server.time, time_mock)
        self.assertEqual(upload_server._static_folder, static_folder)
        self.assertEqual(upload_server.template_folder, template_folder)

        self.assertTrue(upload_server._ready)
        self.assertFalse(upload_server._stop_resp)

    def test_health_check(self):
        # Call under test
        ret_val = self.upload_server.health_check()
        self.assertEqual(ret_val, Stub('flask.Response', 'OK', status=200))

    def test_ready_check(self):
        self.upload_server._ready = True
        # Call under test
        ret_val = self.upload_server.ready()
        self.assertEqual(
            ret_val, Stub('flask.Response', 'OK', status=constants.HTTP_OK))

        self.upload_server._ready = False
        # Call under test
        ret_val = self.upload_server.ready()
        self.assertEqual(
            ret_val, Stub('flask.Response', status=constants.HTTP_OOM))

    def test_launch_readiness_checker(self):
        thread = Mock()
        threading_mock = Mock()
        threading_mock.Thread = Mock(return_value=thread)

        self.threading = threading_mock
        self._create_upload_server()

        # Call under test
        self.upload_server._launch_readiness_checker()

        threading_mock.Thread.assert_called_with(
            name='Readiness monitor',
            target=self.upload_server._readiness_monitor)
        self.assertTrue(threading_mock.daemon)
        thread.start.assert_called_with()

    def test_readiness_monitor(self):
        """
        upload_server._readiness_monitor is launched by
        _launch_readiness_checker when the object is created.
        """
        with open(self.upload_server._readiness_file, 'w') as f:
            f.write(constants.STATUS_STOP_RESPONDING)
        time.sleep(constants.READINESS_UPDATE_INTERVAL * 2)
        self.assertFalse(self.upload_server._ready)
        self.assertTrue(self.upload_server._stop_resp)

        with open(self.upload_server._readiness_file, 'w') as f:
            f.write(constants.STATUS_NOT_READY)
        time.sleep(constants.READINESS_UPDATE_INTERVAL * 2)
        self.assertFalse(self.upload_server._ready)
        self.assertFalse(self.upload_server._stop_resp)

        with open(self.upload_server._readiness_file, 'w') as f:
            f.write(constants.STATUS_READY)
        time.sleep(constants.READINESS_UPDATE_INTERVAL * 2)
        self.assertTrue(self.upload_server._ready)
        self.assertFalse(self.upload_server._stop_resp)

    # TODO: implement this - method under test will eventually be wrapped in
    # an auth required decorator
    # def test_upload(self):
    #     pass

    def test_upload_post_stop_responding_true(self):
        self.request.content_length = constants.MAX_UPLOAD_SIZE - 1
        self._create_upload_server()

        # Change readiness status
        with open(self.upload_server._readiness_file, 'w') as f:
            f.write(constants.STATUS_STOP_RESPONDING)

        # Wait for daemon thread to register updated readiness status
        time.sleep(constants.READINESS_UPDATE_INTERVAL * 2)

        # Call under test
        ret_val = self.upload_server._upload_post()
        self.assertEqual(
            ret_val, Stub('flask.Response', status=constants.HTTP_OOM))

        # Clean up
        with open(self.upload_server._readiness_file, 'w') as f:
            f.write(constants.STATUS_READY)

    def test_upload_post_create_datastore_entry_fails(self):
        self.request.content_type = 'arbitrary'
        self.request.content_length = len(self.data)
        self.request.stream = StringIO(self.data)
        self.request.headers.get = Mock(return_value=self.filename)
        self._create_datastore_entry = Mock(
            side_effect=FailedToSaveToDatastoreError)
        self.os = os

        self._create_upload_server()
        self.upload_server._create_datastore_entry = Mock()

        # Call under test
        ret_val = self.upload_server._upload_post()

        self.assertEqual(ret_val, Stub('flask.Response', status=200))

        # Check that file was written to correctly, even though datastore
        # save failed
        files = os.listdir(self.upload_dir)
        self.assertEqual(len(files), 1)
        fname = files[0]
        self.assertEqual(os.path.splitext(fname)[1],
                         os.path.splitext(self.filename)[1])
        with open(os.path.join(self.upload_dir, fname), 'r') as f:
            fdata = f.read()
        self.assertEqual(fdata, self.data)

    def test_upload_post_file_write_fails_permission_denied(self):
        # Block writing to directory - new permission is read-only for user
        os.chmod(self.upload_dir, stat.S_IRUSR)

        self.request.content_length = len(self.data)
        self.request.stream = StringIO(self.data)
        self.request.content_type = 'arbitrary'
        self.request.headers.get = Mock(return_value=self.filename)
        self._create_datastore_entry = Mock()
        self.os = os

        self._create_upload_server()
        self.upload_server._create_datastore_entry = Mock()

        # Call under test
        ret_val = self.upload_server._upload_post()

        self.assertEqual(ret_val.stub_for, 'flask.Response')
        self.assertEqual(ret_val.kwargs['status'], constants.HTTP_ERROR)

        # Make sure that directory is empty
        files = os.listdir(self.upload_dir)
        self.assertEqual(len(files), 0)

        # Clean up
        os.chmod(self.upload_dir, stat.S_IRWXU)

    def test_upload_post_client_disconnects_error(self):
        self.request.stream = StringIO(self.data)
        self.request.content_type = 'arbitrary'
        self.request.headers.get = Mock(return_value=self.filename)
        self._create_datastore_entry = Mock()
        self.os = os

        self._create_upload_server()
        self.upload_server._create_datastore_entry = Mock()
        self.upload_server._write_data_to_file = Mock(
            side_effect=ClientDisconnected)

        # Call under test
        ret_val = self.upload_server._upload_post()

        self.assertEqual(
            ret_val, Stub('flask.Response', status=constants.HTTP_ERROR))
        self.upload_server.request.headers.get.assert_called_with(
            constants.HTTP_FILENAME_HEADER)

        # Make sure that directory is empty
        files = os.listdir(self.upload_dir)
        self.assertEqual(len(files), 0)

    def test_upload_post_file_rename_fails(self):
        self.request.content_length = len(self.data)
        self.request.stream = StringIO(self.data)
        self.request.content_type = 'arbitrary'
        self.request.headers.get = Mock(return_value=self.filename)
        self._create_datastore_entry = Mock()
        self.os = os
        self.util = Mock()

        self._create_upload_server()
        self.upload_server._create_datastore_entry = Mock()
        self.upload_server.util.retry_func = Mock(
            side_effect=RuntimeError)

        # Call under test
        ret_val = self.upload_server._upload_post()

        self.assertEqual(ret_val.stub_for, 'flask.Response')
        self.assertEqual(ret_val.kwargs['status'], constants.HTTP_ERROR)
        self.upload_server.request.headers.get.assert_called_with(
            constants.HTTP_FILENAME_HEADER)

        files = os.listdir(self.upload_dir)
        self.assertEqual(len(files), 1)
        fname = files[0]
        self.assertTrue(fname.endswith(self.file_not_ready_suffix))

    def test_upload_post_success(self):
        self.request.content_length = len(self.data)
        self.request.stream = StringIO(self.data)
        self.request.content_type = 'arbitrary'
        self.request.headers.get = Mock(return_value=self.filename)
        self._create_datastore_entry = Mock()
        self.os = os

        self._create_upload_server()
        self.upload_server._create_datastore_entry = Mock()

        # Call under test
        ret_val = self.upload_server._upload_post()

        self.assertEqual(ret_val, Stub('flask.Response', status=200))

        # Check that file was written to correctly, even though datastore
        # save failed
        files = os.listdir(self.upload_dir)
        self.assertEqual(len(files), 1)
        fname = files[0]
        self.assertEqual(os.path.splitext(fname)[1],
                         os.path.splitext(self.filename)[1])
        with open(os.path.join(self.upload_dir, fname), 'r') as f:
            fdata = f.read()
        self.assertEqual(fdata, self.data)

        self.upload_server.request.headers.get.assert_called_with(
            constants.HTTP_FILENAME_HEADER)
        self.upload_server._create_datastore_entry.assert_called_with(fname)

    def test_create_datastore_entry_gcloud_error(self):
        key = 'secret'
        gcloud_error = GCloudError('')
        gcloud_error.code = constants.HTTP_ERROR
        now = datetime.now()
        uid = 1234543
        client = Mock()
        client.key = Mock(return_value=key)
        client.put = Mock(side_effect=gcloud_error)
        entity = dict()

        self.datetime.now = Mock(return_value=now)
        self._create_upload_server()

        self.upload_server.datastore.Client = Mock(return_value=client)
        self.upload_server.datastore.Entity = Mock(return_value=entity)

        with self.assertRaises(FailedToSaveToDatastoreError):
            # Call under test
            self.upload_server._create_datastore_entry(self.filename, uid)

        self.upload_server.datastore.Client.assert_called_with(
            self.upload_server.config['PROJECT_ID'])
        self.upload_server.datastore.Entity.assert_called_with(
            key=key)
        client.key.assert_called_with(self.datastore_kind, self.filename)
        client.put.assert_called_with(entity)

        self.assertFalse(entity['in_gcs'])
        self.assertEqual(entity['user'], uid)
        self.assertEqual(entity['uploaded_date'], now)

    def test_create_datastore_entry_success(self):
        key = 'secret'
        now = datetime.now()
        uid = 1234543
        client = Mock()
        client.key = Mock(return_value=key)

        self.datetime.now = Mock(return_value=now)
        self._create_upload_server()

        for user in (uid, None):
            # Fresh entity for each loop iteration
            entity = dict()
            self.upload_server.datastore.Client = Mock(return_value=client)
            self.upload_server.datastore.Entity = Mock(return_value=entity)

            # Call under test
            self.upload_server._create_datastore_entry(self.filename, user)

            self.upload_server.datastore.Client.assert_called_with(
                self.upload_server.config['PROJECT_ID'])
            self.upload_server.datastore.Entity.assert_called_with(
                key=key)
            client.key.assert_called_with(self.datastore_kind, self.filename)
            client.put.assert_called_with(entity)

            self.assertFalse(entity['in_gcs'])
            self.assertEqual(entity['user'], user)
            self.assertEqual(entity['uploaded_date'], now)

    def test_write_data_to_file(self):
        fstub = StringIO()
        fstub.write(''.join(['a' for _ in range(20 * constants.MB)]))
        fstub.seek(0)
        fpath = os.path.join(self.temp_dir, 'somefile')

        self.request.stream = fstub
        self._create_upload_server()

        # Call under test
        self.upload_server._write_data_to_file(fpath)

        # Reset file stub
        fstub.seek(0)

        # Check that data was written correctly, and don't fill up RAM in the
        # process
        with open(fpath, 'r') as f:
            while True:
                exp_chunk = fstub.read(constants.MB)
                act_chunk = f.read(constants.MB)
                self.assertEqual(exp_chunk, act_chunk)
                if len(act_chunk) == 0:
                    break

        # Clean up
        os.remove(fpath)

    def _create_upload_server(self):
        """
        Helper function to create upload server instance based on current
        dependency values originally defined in __init__.
        """
        self.upload_server = UploadServer(
            project_id=config.PROJECT_ID,
            file_not_ready_suffix=self.file_not_ready_suffix,
            directory=self.upload_dir,
            datastore_kind=self.datastore_kind,
            retrys=self.retrys,
            readiness_file=self.readiness_file,
            datastore=self.datastore,
            datetime=self.datetime,
            os=self.os,
            request=self.request,
            Response=self.Response,
            threading=self.threading,
            util=self.util)
