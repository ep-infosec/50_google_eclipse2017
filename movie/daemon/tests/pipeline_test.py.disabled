#
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/env python

import os
import unittest2

from datetime import datetime
from gcloud import datastore, storage

from common.config import PROJECT_ID
from common import datastore_schema as ds
from common import constants

from app import pipeline

class PipelineTests(unittest2.TestCase):
    """
    Tests for the Pipeline class.
    """

    def setUp(self):
        self.testEntity = "TestObj"

        #Get current datastore client (emulator) & GCS client
        self.datastore_client = datastore.Client(PROJECT_ID)
        self.storage_client = storage.client.Client(PROJECT_ID)

        # Create new instance of movie pipeline class using out clients
        self.movie_pipeline = pipeline.Pipeline(self.datastore_client, self.storage_client)

        # Mock photo object
        ds.DATASTORE_ORIENTED_IMAGE = self.testEntity

    def tearDown(self):
        # Delete any test entities in datastore emulator
        query = self.datastore_client.query(kind=self.testEntity)
        self.datastore_client.delete_multi(list(entity.key for entity in list(query.fetch())))

        # Delete movies
        if os.path.isfile(constants.MOVIE_FPATH):
            os.remove(constants.MOVIE_FPATH)

    # Testing basic functionality
    def test_scan(self):
        files = self.movie_pipeline.scan()
        self.assertEqual(len(files), 0)

        #  Put x entites to datastore with name "<x>"
        for x in xrange(10):
            self._put(self.testEntity, x , [("image_type", ds.TOTALITY_IMAGE_TYPE), \
                                            (ds.TOTALITY_ORDERING_PROPERTY, datetime.now())])

        files = self.movie_pipeline.scan()
        self.assertEqual(len(files),10)


    # Testing scan only returns images tagged as images of full totality
    def test_scan_only_gets_full_disk_images(self):
        #  Put x entites to datastore with name "<x>"
        for x in xrange(10):
            self._put(self.testEntity, x , [("image_type", "crescent"), \
                                            (ds.TOTALITY_ORDERING_PROPERTY, datetime.now())])

        files = self.movie_pipeline.scan()

        self._put(self.testEntity, 10 , [("image_type", ds.TOTALITY_IMAGE_TYPE), \
                                        (ds.TOTALITY_ORDERING_PROPERTY, datetime.now())])

        files = self.movie_pipeline.scan()

        # Check scan only returns 1 entity
        self.assertEqual(len(files), 1)

        # Check that entity is of image_type totality
        result_key = self.datastore_client.key(self.testEntity, files[0])
        result_entity = self.datastore_client.get(result_key)
        self.assertEqual(result_entity["image_type"], ds.TOTALITY_IMAGE_TYPE)



    def test_assemble(self):
        self.movie_pipeline.assemble(["1.jpg", "2.jpg", "3.jpg"])
        self.assertTrue(os.path.isfile(constants.MOVIE_FPATH))


    def test_assemble_with_missing_photos(self):
        self.movie_pipeline.assemble(["1.jpg", "2.jpg", "not_in_gcs.jpg"])
        self.assertTrue(os.path.isfile(constants.MOVIE_FPATH))


    def test_assemble_all_missing_photos(self):
        self.movie_pipeline.assemble(["not_in_gcs1.jpg", "not_in_gcs2.jpg", "not_in_gcs3.jpg"])
        self.assertFalse(os.path.isfile(constants.MOVIE_FPATH))

    # Create an entity of type <kind> with id/name <name> and upload to datastore
    # with the given properties (defaults to )
    def _put(self, kind, name, properties):
        key = self.datastore_client.key(kind, str(name))
        entity = datastore.Entity(key)

        for (property_name, property_value) in properties:
            entity[property_name] = property_value

        self.datastore_client.put(entity)